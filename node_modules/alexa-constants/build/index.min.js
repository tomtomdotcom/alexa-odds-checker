'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var AudioPlayer = {
  Request: {
    PlaybackFailed: 'AudioPlayer.PlaybackFailed',
    PlaybackFinished: 'AudioPlayer.PlaybackFinished',
    PlaybackNearlyFinished: 'AudioPlayer.PlaybackNearlyFinished',
    PlaybackStarted: 'AudioPlayer.PlaybackStarted',
    PlaybackStopped: 'AudioPlayer.PlaybackStopped'
  },

  Directive: {
    ClearQueue: 'AudioPlayer.ClearQueue',
    Play: 'AudioPlayer.Play',
    Stop: 'AudioPlayer.Stop'
  },

  PlayBehavior: {
    Enqueue: 'ENQUEUE',
    ReplaceAll: 'REPLACE_ALL',
    ReplaceEnqueued: 'REPLACE_ENQUEUED'
  },

  ClearBehavior: {
    ClearAll: 'CLEAR_ALL',
    ClearEnqueued: 'CLEAR_ENQUEUED'
  }
};

var CardType = {
  LinkAccount: 'LinkAccount',
  Simple: 'Simple',
  Standard: 'Standard'
};

var ConnectedHome = {
  Control: 'Alexa.ConnectedHome.Control',
  Discovery: 'Alexa.ConnectedHome.Discovery',
  System: 'Alexa.ConnectedHome.System',

  Request: {
    DecrementPercentage: 'DecrementPercentageRequest',
    DecrementTargetTemperature: 'DecrementTargetTemperatureRequest',
    DiscoverAppliances: 'DiscoverAppliancesRequest',
    HealthCheck: 'HealthCheckRequest',
    IncrementPercentage: 'IncrementPercentageRequest',
    IncrementTargetTemperature: 'IncrementTargetTemperatureRequest',
    SetPercentage: 'SetPercentageRequest',
    SetTargetTemperature: 'SetTargetTemperatureRequest',
    TurnOff: 'TurnOffRequest',
    TurnOn: 'TurnOnRequest'
  },

  Response: {
    DiscoverAppliances: 'DiscoverAppliancesResponse',
    HealthCheck: 'HealthCheckResponse'
  },

  Confirmation: {
    DecrementPercentage: 'DecrementPercentageConfirmation',
    DecrementTargetTemperature: 'DecrementTargetTemperatureConfirmation',
    IncrementPercentage: 'IncrementPercentageConfirmation',
    IncrementTargetTemperature: 'IncrementTargetTemperatureConfirmation',
    SetPercentage: 'SetPercentageConfirmation',
    SetTargetTemperature: 'SetTargetTemperatureConfirmation',
    TurnOff: 'TurnOffConfirmation',
    TurnOn: 'TurnOnConfirmation'
  }
};

var Dialog = {
  Started: 'STARTED',
  InProgress: 'IN_PROGRESS',
  Completed: 'COMPLETED'
};

var Intent = {
  Cancel: 'AMAZON.CancelIntent',
  Help: 'AMAZON.HelpIntent',
  LoopOff: 'AMAZON.LoopOffIntent',
  LoopOn: 'AMAZON.LoopOnIntent',
  Next: 'AMAZON.NextIntent',
  No: 'AMAZON.NoIntent',
  Pause: 'AMAZON.PauseIntent',
  Previous: 'AMAZON.PreviousIntent',
  Repeat: 'AMAZON.RepeatIntent',
  Resume: 'AMAZON.ResumeIntent',
  ShuffleOff: 'AMAZON.ShuffleOffIntent',
  ShuffleOn: 'AMAZON.ShuffleOnIntent',
  StartOver: 'AMAZON.StartOverIntent',
  Stop: 'AMAZON.StopIntent',
  Yes: 'AMAZON.YesIntent'
};

var PlaybackController = {
  Request: {
    NextCommandIssued: 'PlaybackController.NextCommandIssued',
    PauseCommandIssued: 'PlaybackController.PauseCommandIssued',
    PlayCommandIssued: 'PlaybackController.PlayCommandIssued',
    PreviousCommandIssued: 'PlaybackController.PreviousCommandIssued'
  }
};

var Request = {
  ExceptionEncountered: 'System.ExceptionEncountered',
  Intent: 'IntentRequest',
  Launch: 'LaunchRequest',
  SessionEnded: 'SessionEndedRequest'
};

var SpeechType = {
  PlainText: 'PlainText',
  SSML: 'SSML'
};

var index = {
  AudioPlayer,
  CardType,
  ConnectedHome,
  Dialog,
  Intent,
  PlaybackController,
  Request,
  SpeechType
};

exports.AudioPlayer = AudioPlayer;
exports.CardType = CardType;
exports.ConnectedHome = ConnectedHome;
exports.Dialog = Dialog;
exports.Intent = Intent;
exports.PlaybackController = PlaybackController;
exports.Request = Request;
exports.SpeechType = SpeechType;
exports['default'] = index;
