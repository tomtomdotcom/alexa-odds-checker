'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var PropTypes = _interopDefault(require('prop-types'));

/**
 * Applies Amazon-specific effects to the speech.
 *
 * More info:
 *   https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/speech-synthesis-markup-language-ssml-reference#amazon-effect
 */

var amazonEffectTag = {
  type: 'amazon:effect',
  propTypes: {
    name: PropTypes.oneOf(['whispered']),
    children: PropTypes.any.isRequired
  }
};

/**
 * The audio tag lets you provide the URL for an MP3 file that the Alexa service can play while rendering a response.
 * You can use this to embed short, pre-recorded audio within your service’s response.
 *
 * More info:
 *   https://www.w3.org/TR/speech-synthesis/#S3.3.1
 */

var audio = {
  type: 'audio',
  propTypes: {
    src: PropTypes.string.isRequired,
    children: PropTypes.any
  }
};

const match = regex => (props, propName, tagName) => {
  const value = props && props[propName];
  if (value && !regex.exec(value)) {
    return new Error(`Invalid value for prop "${propName}" on "${tagName}" tag. Expected "${value}" to match ${regex.toString()}.`);
  }
};

const none = (props, propName, tagName) => {
  if (props && props[propName]) {
    return new Error(`Unexpected prop "${propName}" on "${tagName}" tag. Expected none.`);
  }
};

/**
 * Represents a pause in the speech. Set the length of the pause with the strength or time attributes.
 *
 * More info:
 *   https://www.w3.org/TR/speech-synthesis/#S3.2.3
 */

const Strengths = ['none', // No pause should be outputted. This can be used to remove a pause that would normally occur (such as after a period).
'x-weak', // No pause should be outputted (same as none).
'weak', // Treat adjacent words as if separated by a single comma (equivalent to medium).
'medium', // Treat adjacent words as if separated by a single comma.
'strong', // Make a sentence break (equivalent to using the <s> tag).
'x-strong' // Make a paragraph break (equivalent to using the <p> tag).
];

var breakTag = {
  type: 'break',
  propTypes: {
    strength: PropTypes.oneOf(Strengths),
    time: match(/(\d+)(m?s)?/),
    children: none
  }
};

/**
 * Emphasize the tagged words or phrases. Emphasis changes rate and volume of the speech. More emphasis is spoken louder
 * and slower. Less emphasis is quieter and faster.
 *
 * More info:
 *   https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/speech-synthesis-markup-language-ssml-reference#emphasis
 */

var emphasis = {
  type: 'emphasis',
  propTypes: {
    level: PropTypes.oneOf(['strong', 'moderate', 'reduced']),
    children: PropTypes.any.isRequired
  }
};

/**
 * Represents a paragraph. This tag provides extra-strong breaks before and after the tag.
 *
 * More info:
 *   https://www.w3.org/TR/speech-synthesis/#S3.1.7
 */

var p = {
  type: 'p',
  propTypes: {
    children: PropTypes.any.isRequired
  }
};

/**
 * Provides a phonemic/phonetic pronunciation for the contained text. For example, people may pronounce words like
 * “pecan” differently.
 *
 * More info:
 *   https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/speech-synthesis-markup-language-ssml-reference#phoneme
 */

var phoneme = {
  type: 'phoneme',
  propTypes: {
    alphabet: PropTypes.oneOf(['ipa', 'x-sampa']).isRequired,
    ph: PropTypes.string.isRequired,
    children: PropTypes.any.isRequired
  }
};

/**
 * Modifies the volume, pitch, and rate of the tagged speech.
 *
 * More info:
 *   https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/speech-synthesis-markup-language-ssml-reference#prosody
 */

var prosody = {
  type: 'prosody',
  propTypes: {
    rate: PropTypes.oneOfType([PropTypes.oneOf(['x-slow', 'slow', 'medium', 'fast', 'x-fast']), match(/[1-9][0-9]*%/)]),
    pitch: PropTypes.oneOfType([PropTypes.oneOf(['x-low', 'low', 'medium', 'high', 'x-high']), match(/[+-][1-9][0-9]*%/)]),
    volume: PropTypes.oneOfType([PropTypes.oneOf(['silent', 'x-soft', 'soft', 'medium', 'loud', 'x-loud']), match(/[+-][0-9]+(?:[.][0-9]+)?dB/)]),
    children: PropTypes.any.isRequired
  }
};

/**
 * Represents a sentence. This tag provides strong breaks before and after the tag.
 *
 * More info:
 *   https://www.w3.org/TR/speech-synthesis/#S3.1.7
 */

var s = {
  type: 's',
  propTypes: {
    children: PropTypes.any.isRequired
  }
};

/**
 * Indicate information on the type of text construct contained within the element.
 *
 * More info:
 *   https://www.w3.org/TR/speech-synthesis/#S3.1.8
 */

const interpretations = ['characters', 'spell-out', // Spell out each letter
'cardinal', 'number', // Interpret the value as a cardinal number
'ordinal', // Interpret the value as an ordinal number
'digits', // Spell each digit separately
'fraction', // Interpret the value as a fraction
'unit', // Interpret a value as a measurement
'date', // Interpret the value as a date. Specify the format with the format attribute
'time', // Interpret a value such as 1'21" as duration in minutes and seconds
'telephone', // Interpret a value as a 7-digit or 10-digit telephone number
'address', // Interpret a value as part of street address
'interjection', // Interpret a value as an interjection
'expletive' // "Bleep" out the content inside the tag
];

const formats = ['mdy', 'dmy', 'ymd', 'md', 'dm', 'ym', 'my', 'd', 'm', 'y'];

var sayAsTag = {
  type: 'say-as',
  propTypes: {
    children: PropTypes.any.isRequired,
    'interpret-as': PropTypes.oneOf(interpretations).isRequired,
    format: (props, propName, tagName) => {
      if (props['interpret-as'] === 'date') {
        const format = PropTypes.oneOf(formats).isRequired;
        return format(props, propName, tagName);
      }
    }
  }
};

/**
 * This is the root element of an SSML document.
 *
 * More info:
 *   https://www.w3.org/TR/speech-synthesis/#S3.1.1
 */

var speak = {
  type: 'speak',
  propTypes: {
    children: PropTypes.any.isRequired
  }
};

/**
 * Pronounce the specified word or phrase as a different word or phrase. Specify the pronunciation to substitute with
 * the alias attribute.
 *
 * More info:
 *   https://www.w3.org/TR/speech-synthesis/#edef_sub
 */

var sub = {
  type: 'sub',
  propTypes: {
    alias: PropTypes.string.isRequired,
    children: PropTypes.any.isRequired
  }
};

/**
 * Similar to <say-as>, this tag customizes the pronunciation of words by specifying the word’s part of speech.
 *
 * More info:
 *   https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/speech-synthesis-markup-language-ssml-reference#w
 */

var w = {
  type: 'w',
  propTypes: {
    role: PropTypes.oneOf(['amazon:VB', 'amazon:VBD', 'amazon:NN', 'amazon:SENSE_1']),
    children: PropTypes.any.isRequired
  }
};

var schema = {
  'amazon:effect': amazonEffectTag,
  audio,
  'break': breakTag,
  emphasis,
  p,
  phoneme,
  prosody,
  s,
  'say-as': sayAsTag,
  speak,
  sub,
  w
};

function ssml$1({ elementName: tagName, attributes: props, children }) {
  const tag = throwIfUndefined(getTagDefinition(tagName), `Unsupported tag: "${tagName}"`);
  const mergedProps = tag.defaultProps ? Object.assign({}, tag.defaultProps, props) : props;

  PropTypes.checkPropTypes(tag.propTypes, Object.assign({}, mergedProps, { children }), 'prop', tagName);

  return { elementName: tag.type, attributes: mergedProps, children };
}

function throwIfUndefined(item, error) {
  if (!item) {
    throw new Error(error);
  } else {
    return item;
  }
}

function getTagDefinition(tag) {
  switch (typeof tag) {
    case 'string':
      return schema[tag];
    case 'function':
      return Object.assign({}, tag, { type: tag });
    default:
      return undefined;
  }
}

const entries = object => Object.keys(object).map(key => [key, object[key]]);

function renderToString(node, options = {}) {
  if (!node || node.elementName !== 'speak') {
    throw Error('Expected SSML to be surrounded in a <speak> tag.');
  }

  return render(node, Object.assign({}, options, { root: true }));
}

function render(node, options = {}) {
  if (!node) {
    return '';
  }

  if (Array.isArray(node)) {
    return node.map(child => render(child, Object.assign({}, options, { root: false }))).join('');
  }

  if (typeof node.elementName === 'function') {
    return render(node.elementName(Object.assign({}, node.attributes, { children: node.children })), Object.assign({}, options, { root: false }));
  }

  if (typeof node === 'string') {
    return node;
  }

  const children = node.children || [];

  if (node.elementName === 'speak' && !options.root) {
    return children.map(child => render(child, Object.assign({}, options, { root: false }))).join('');
  }

  const attributes = entries(node.attributes).reduce((state, [key, value]) => `${state} ${key}="${value}"`, '');

  return children.length ? `<${node.elementName}${attributes}>${children.map(child => render(child, Object.assign({}, options, { root: false }))).join('')}</${node.elementName}>` : `<${node.elementName}${attributes}/>`;
}

exports['default'] = ssml$1;
exports.renderToString = renderToString;
